/* This is an autogenerated file from a template. Do not edit this file as it will be overwritten.*/
/**
 *
 * zsmt_hybrid_params.h
 *
 * Binary hard-switch hybrid estimator ('Minotaur')
 *
 * Component: commutation
 */ /*
 *
 * Motor Control Application Framework
 * R7/RC37 (commit 116330, build on 2023 Feb 09)
 *
 * (c) 2017 - 2023 Microchip Technology Inc. and its subsidiaries. You may use
 * this software and any derivatives exclusively with Microchip products.
 *
 * This software and any accompanying information is for suggestion only.
 * It does not modify Microchip's standard warranty for its products.
 * You agree that you are solely responsible for testing the software and
 * determining its suitability.  Microchip has no obligation to modify,
 * test, certify, or support the software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
 * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
 * AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS INTERACTION WITH
 * MICROCHIP PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE IN ANY
 * APPLICATION.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL,
 * PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF
 * ANY KIND WHATSOEVER RELATED TO THE USE OF THIS SOFTWARE, THE
 * motorBench(R) DEVELOPMENT SUITE TOOL, PARAMETERS AND GENERATED CODE,
 * HOWEVER CAUSED, BY END USERS, WHETHER MICROCHIP'S CUSTOMERS OR
 * CUSTOMER'S CUSTOMERS, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES OR THE DAMAGES ARE FORESEEABLE. TO THE
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL
 * CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT
 * OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS
 * SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF
 * THESE TERMS.
 *
 *
 ******************************************************************************/
#ifndef __ZSMT_HYBRID_PARAMS_H
#define __ZSMT_HYBRID_PARAMS_H

#ifdef  __cplusplus
extern "C" {
#endif

/* 
 *
 * vd_limit:                     0.450000  
 * vq_limit:                     0.780000  
 * omega_m_slow:                  31.416  rad/s
 *                               300.000  RPM
 * omega_m_transition:            41.888  rad/s
 *                               400.000  RPM
 * omega_m_fast:                  52.360  rad/s
 *                               500.000  RPM
 * converge_angle_threshold:     174.533 mrad
 * converge_duration:              2.000 ms
 */
 
/* Reduced limit during ZS/MT for output line-to-line voltage of d-axis current controller, expressed as a fraction of DC link voltage */
#define ZSMT_CURRENT_CTRL_D_OUT_LIMIT        8513      // Q15(  0.25980) = +449.98012 mline-to-line = +450.00000 mline-to-line - 0.0044%
/* Reduced limit during ZS/MT for output line-to-line voltage of q-axis current controller, expressed as a fraction of DC link voltage */
#define ZSMT_CURRENT_CTRL_Q_OUT_LIMIT       14757      // Q15(  0.45035) = +780.02544 mline-to-line = +780.00000 mline-to-line + 0.0033%
/* Velocity threshold slow */
#define MCAF_ZSMT_HYBRID_VELOCITY_THRESHOLD_SLOW       3277      // Q15(  0.10001) =  +31.41784 rad/s       =  +31.41593 rad/s       + 0.0061%
/* Velocity threshold transition */
#define MCAF_ZSMT_HYBRID_VELOCITY_THRESHOLD_TRANSITION       4369      // Q15(  0.13333) =  +41.88726 rad/s       =  +41.88790 rad/s       - 0.0015%
/* Velocity threshold fast */
#define MCAF_ZSMT_HYBRID_VELOCITY_THRESHOLD_FAST       5461      // Q15(  0.16666) =  +52.35668 rad/s       =  +52.35988 rad/s       - 0.0061%
/* Maximum angle difference allowed for switching to back-emf based estimator */
#define MCAF_ZSMT_HYBRID_ANGLE_CONVERGE_THRESHOLD       1820      // Q15(  0.05554) = +174.49031 mrad        = +174.53293 mrad        - 0.0244%
/* Minimum duration of angle convergence for switching to back-emf based estimator */
#define MCAF_ZSMT_HYBRID_ANGLE_CONVERGE_DURATION         40      // Q0( 40.00000)  =   +2.00000 ms          =   +2.00000 ms          + 0.0000%

#ifdef  __cplusplus
}
#endif

#endif // __ZSMT_HYBRID_PARAMS_H
